// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    // Put your code here:
	DMux8Way(in=load ,sel=address[0..2] ,a=reg0 ,b=reg1 ,c=reg2 ,d=reg3 ,e=reg4 ,f=reg5 ,g=reg6 ,h=reg7);
	RAM4K(in=in ,load=reg0 ,address=address[2..13] ,out=Ram0 ); 
	RAM4K(in=in ,load=reg1 ,address=address[2..13] ,out=Ram1 ); 
	RAM4K(in=in ,load=reg2 ,address=address[2..13] ,out=Ram2 ); 
	RAM4K(in=in ,load=reg3 ,address=address[2..13] ,out=Ram3 ); 
	RAM4K(in=in ,load=reg4 ,address=address[2..13] ,out=Ram4 ); 
	RAM4K(in=in ,load=reg5 ,address=address[2..13] ,out=Ram5 ); 
	RAM4K(in=in ,load=reg6 ,address=address[2..13] ,out=Ram6 ); 
	RAM4K(in=in ,load=reg7 ,address=address[2..13] ,out=Ram7 ); 
	Mux8Way16(a=Ram0 ,b=Ram1 ,c=Ram2 ,d=Ram3 ,e=Ram4 ,f=Ram5 ,g=Ram6 ,h=Ram7 ,sel=address[0..2] ,out=out);
}